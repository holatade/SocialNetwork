var has? = hu
// means has can be undefined

var has = hu!
means hu can be null or undefined


/onChange for input is a type React.ChangeEvent<HTMLInputElement> but onChnage for a TextArea is React.FormEvent<HTMLTextAreaElememt>
  //To accomodate for type of event we use React.ChangeEvent<HTMLInputElement> and  FormEvent<HTMLTextAreaElement>
  //when the event is form event instead of changeevent the target of the value or name now becomes event.currentTraget instead of event
  //.target
  // const handleInputChange = (
  //   event: ChangeEvent<HTMLInputElement> | FormEvent<HTMLTextAreaElement>
  // ) => {
  //   const { name, value } = event.currentTarget;
  //   setActivity({ ...activity, [name]: value });
  // };

  // const handleSubmit = () => {
  //   if (activity.id.length === 0) {
  //     let newActivity: IActivity = {
  //       ...activity,
  //       //? install the package uuid to get access to GUID (npm install uuid) and then (npm install @types/uuid) to get they types
  //       id: uuid(),
  //     };
  //     createActivity(newActivity).then(() => {
  //       history.push(`/activities/${newActivity.id}`);
  //     });
  //   } else {
  //     editActivity(activity).then(() => {
  //       history.push(`/activities/${activity.id}`);
  //     });
  //   }
  // };

  const Activities = {
  list: (limit?: number, page?: number): Promise<IActivitiesEnvelope> =>
    request.get(
      `/activities?limit=${limit}&offset=${page ? page * limit! : 0}`
    ),
  details: (id: string) => request.get(`/activities/${id}`),
  create: (activity: IActivity) => request.post("/activities", activity),
  update: (activity: IActivity) =>
    request.put(`/activities/${activity.id}`, activity),
  delete: (id: string) => request.del(`/activities/${id}`),
  attend: (id: string) => request.post(`/activities/${id}/attend`, {}),
  unattend: (id: string) => request.del(`/activities/${id}/attend`),
};